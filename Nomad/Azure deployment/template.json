{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "masterCount": {
            "defaultValue": 1,
            "allowedValues": [
                1,
                3,
                5
            ],
            "type": "int",
            "metadata": {
                "description": "The number of masters for the cluster."
            }
        },
        "privateCount": {
            "defaultValue": 2,
            "allowedValues": [
                1,
                2,
                3
            ],
            "type": "int",
            "metadata": {
                "description": "The number of private agents for the cluster."
            }
        },
        "publicCount": {
            "defaultValue": 1,
            "allowedValues": [
                1,
                2,
                3
            ],
            "type": "int",
            "metadata": {
                "description": "The number of public agents."
            }
        },
        "agentVMSize": {
            "defaultValue": "Standard_A0",
            "allowedValues": [
                "Standard_A0",
                "Standard_A1",
                "Standard_A2",
                "Standard_A3"
            ],
            "type": "string",
            "metadata": {
                "description": "The size of the master Virtual Machine."
            }
        },
        "masterVMSize": {
            "defaultValue": "Standard_A0",
            "allowedValues": [
                "Standard_A0",
                "Standard_A1",
                "Standard_A2",
                "Standard_A3"
            ],
            "type": "string",
            "metadata": {
                "description": "The size of the agents Virtual Machine."
            }
        },
        "disablePasswordAuthentication": {
            "defaultValue": false,
            "type": "bool",
            "metadata": {
                "description": "This setting controls whether password auth is disabled for Linux VMs provisioned by this template. Default is true which disables password and makes SSH key required."
            }
        },
        "enableNewStorageAccountNaming": {
            "defaultValue": false,
            "type": "bool",
            "metadata": {
                "description": "If true: uses DNS name prefix + Orchestrator name + Region to create storage account name to reduce name collision probability. If false: uses DNS name prefix + Orchestrator name to create storage account name to maintain template idempotency."
            }
        },
        "enableVMDiagnostics": {
            "defaultValue": true,
            "type": "bool",
            "metadata": {
                "description": "Allows user to enable/disable boot & vm diagnostics."
            }
        },
        "isValidation": {
            "defaultValue": 0,
            "allowedValues": [
                0,
                1
            ],
            "type": "int",
            "metadata": {
                "description": "This is testing in the validation region"
            }
        },
        "linuxAdminPassword": {
            "defaultValue": "",
            "type": "securestring",
            "metadata": {
                "description": "Password for the Linux Virtual Machine.  Not Required.  If not set, you must provide a SSH key."
            }
        },
        "linuxAdminUsername": {
            "defaultValue": "azureuser",
            "type": "string",
            "metadata": {
                "description": "User name for the Linux Virtual Machines (SSH or Password)."
            }
        },
        "linuxOffer": {
            "defaultValue": "UbuntuServer",
            "type": "string",
            "metadata": {
                "description": "This is the offer of the image used by the linux cluster"
            }
        },
        "linuxPublisher": {
            "defaultValue": "Canonical",
            "type": "string",
            "metadata": {
                "description": "This is the publisher of the image used by the linux cluster"
            }
        },
        "linuxSku": {
            "defaultValue": "14.04.2-LTS",
            "allowedValues": [
                "12.04.5-LTS",
                "14.04.2-LTS",
                "15.10",
                "16.04.0-DAILY-LTS"
            ],
            "type": "string",
            "metadata": {
                "description": "This is the linux sku used by the linux cluster"
            }
        },
        "linuxVersion": {
            "defaultValue": "latest",
            "type": "string",
            "metadata": {
                "description": "This is the linux version used by the linux cluster"
            }
        },
        "masterEndpointDNSNamePrefix": {
            "type": "string",
            "metadata": {
                "description": "Sets the Domain name label for the master IP Address.  The concatenation of the domain name label and the regional DNS zone make up the fully qualified domain name associated with the public IP address."
            }
        },
        "agentEndpointDNSNamePrefix": {
            "type": "string",
            "metadata": {
                "description": "Sets the Domain name label for the agent pool IP Address.  The concatenation of the domain name label and the regional DNS zone make up the fully qualified domain name associated with the public IP address."
            }
        },
        "nameSuffix": {
            "defaultValue": "01234567",
            "type": "string",
            "metadata": {
                "description": "A string to include in the names of resources created.  Defaults to 0.  Can not be blank."
            }
        },
        "storageAccountType": {
            "type": "string",
            "defaultValue": "Standard_LRS",
            "allowedValues": [
                "Standard_LRS",
                "Standard_ZRS",
                "Standard_GRS",
                "Standard_RAGRS",
                "Premium_LRS"
            ],
            "metadata": {
                "description": "Storage Pricing."
            }
        },
        "vmsPerStorageAccount": {
            "defaultValue": 5,
            "type": "int",
            "metadata": {
                "description": "This specifies the number of VMs per storage accounts"
            }
        },
        "setLinuxConfigurationForVMCreate": {
            "defaultValue": 1,
            "allowedValues": [
                0,
                1
            ],
            "type": "int",
            "metadata": {
                "description": "This setting controls whether Linux configuration with SSH Key is passed in VM PUT Payload.  Defaults to 1.  If SSH Key is blank, this must be set to 0."
            }
        }
    },
    "variables": {
        "accountid": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/','Microsoft.Storage/storageAccounts/', variables('storageAccountBaseName'))]",
        "adminPassword": "[parameters('linuxAdminPassword')]",
        "adminUsername": "[parameters('linuxAdminUsername')]",
        "agentAddressPrefix": "10.0.0.0/8",
        "agentEndpointDNSNamePrefix": "[tolower(parameters('agentEndpointDNSNamePrefix'))]",
        "agentFirstAddr": 20,
        "agentPublicAddressPrefix": "10.0.0.0/11",
        "agentPrivateAddressPrefix": "10.32.0.0/11",
        "agentPrivateCount": "[parameters('privateCount')]",
        "agentPrivateNSGID": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('agentPrivateNSGName'))]",
        "agentPrivateNSGName": "[concat(variables('orchestratorName'), '-agent-private-nsg-', variables('nameSuffix'))]",
        "agentPrivateSubnetName": "[concat(variables('orchestratorName'), '-agentPrivateSubnet')]",
        "agentPrivateVMNamePrefix": "[concat(variables('orchestratorName'), '-agent-private-', variables('nameSuffix'))]",
        "agentPrivateVMSSCount": 1,
        "agentPublicCount": "[parameters('publicCount')]",
        "agentPublicIPAddressName": "[concat(variables('orchestratorName'), '-agent-ip-', variables('agentEndpointDNSNamePrefix'), '-', variables('nameSuffix'))]",
        "agentPublicNSGID": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('agentPublicNSGName'))]",
        "agentPublicNSGName": "[concat(variables('orchestratorName'), '-agent-public-nsg-', variables('nameSuffix'))]",
        "agentPublicSubnetName": "[concat(variables('orchestratorName'), '-agentPublicSubnet')]",
        "agentPublicVMNamePrefix": "[concat(variables('orchestratorName'), '-agent-public-', variables('nameSuffix'))]",
        "agentStoragePrivateAccountName": "[concat(variables('storageAccountBaseName'), 'agntpri')]",
        "agentStoragePublicAccountName": "[concat(variables('storageAccountBaseName'), 'agntpub')]",
        "agentVMSize": "[parameters('agentVMSize')]",
        "masterVMSize": "[parameters('masterVMSize')]",
        "agentsPerIPv4Octet": 200,
        "agentsPublicLbBackendPoolName": "[concat(variables('orchestratorName'), '-agent-pool-', variables('nameSuffix'))]",
        "agentsPublicLbID": "[resourceId('Microsoft.Network/loadBalancers',variables('agentsPublicLbName'))]",
        "agentsPublicLbIPConfigID": "[concat(variables('agentsPublicLbID'),'/frontendIPConfigurations/', variables('agentsPublicLbIPConfigName'))]",
        "agentsPublicLbIPConfigName": "[concat(variables('orchestratorName'), '-agent-lbFrontEnd-', variables('nameSuffix'))]",
        "agentsPublicLbName": "[concat(variables('orchestratorName'), '-agent-lb-', variables('nameSuffix'))]",
        "apiVersionDefault": "2016-03-30",
        "apiVersionStorage": "2015-06-15",
        "diagnosticsStorageAccountResourceGroup": "[resourceGroup().name]",
        "enableNewStorageAccountNaming": "[parameters('enableNewStorageAccountNaming')]",
        "enableVMDiagnostics": "[parameters('enableVMDiagnostics')]",
        "isValidation": "[parameters('isValidation')]",
        "linuxOffer": "[parameters('linuxOffer')]",
        "linuxPublisher": "[parameters('linuxPublisher')]",
        "linuxSku": "[parameters('linuxSku')]",
        "linuxVersion": "[parameters('linuxVersion')]",
        "masterAddressPrefix": "172.16.0.0/24",
        "masterAvailabilitySet": "[concat(variables('orchestratorName'), '-master-availabilitySet-', variables('nameSuffix'))]",
        "masterCount": "[parameters('masterCount')]",
        "masterEndpointDNSNamePrefix": "[tolower(parameters('masterEndpointDNSNamePrefix'))]",
        "masterFirstAddr": 5,
        "masterLbBackendPoolName": "[concat(variables('orchestratorName'), '-master-pool-', variables('nameSuffix'))]",
        "masterLbID": "[resourceId('Microsoft.Network/loadBalancers',variables('masterLbName'))]",
        "masterLbIPConfigID": "[concat(variables('masterLbID'),'/frontendIPConfigurations/', variables('masterLbIPConfigName'))]",
        "masterLbIPConfigName": "[concat(variables('orchestratorName'), '-master-lbFrontEnd-', variables('nameSuffix'))]",
        "masterLbName": "[concat(variables('orchestratorName'), '-master-lb-', variables('nameSuffix'))]",
        "masterNSGID": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('masterNSGName'))]",
        "masterNSGName": "[concat(variables('orchestratorName'), '-master-nsg-', variables('nameSuffix'))]",
        "masterPublicIPAddressName": "[concat(variables('orchestratorName'), '-master-ip-', variables('masterEndpointDNSNamePrefix'), '-', variables('nameSuffix'))]",
        "masterSubnetName": "[concat(variables('orchestratorName'), '-masterSubnet')]",
        "masterSubnetRef": "[concat(variables('vnetID'),'/subnets/',variables('masterSubnetName'))]",
        "masterVMNamePrefix": "[concat(variables('orchestratorName'), '-master-', variables('nameSuffix'), '-')]",
        "masterVMNic": [
            "[concat(variables('masterVMNamePrefix'), 'nic-0')]",
            "[concat(variables('masterVMNamePrefix'), 'nic-1')]",
            "[concat(variables('masterVMNamePrefix'), 'nic-2')]",
            "[concat(variables('masterVMNamePrefix'), 'nic-3')]",
            "[concat(variables('masterVMNamePrefix'), 'nic-4')]",
            "[concat(variables('masterVMNamePrefix'), 'nic-5')]",
            "[concat(variables('masterVMNamePrefix'), 'nic-6')]"
        ],
        "nameSuffix": "[parameters('nameSuffix')]",
        "orchestratorName": "nomad",
        "omsStorageAccount": "none",
        "omsStorageAccountKey": "none",
        "osImageOffer": "[variables('linuxOffer')]",
        "osImagePublisher": "[variables('linuxPublisher')]",
        "osImageSKU": "[variables('linuxSku')]",
        "osImageVersion": "[variables('linuxVersion')]",
        "storageAccountBaseName": "[uniquestring(concat(variables('masterEndpointDNSNamePrefix'),variables(concat('storageAccountBaseNameNewSuffix', '-', variables('enableNewStorageAccountNaming'))), variables('orchestratorName')))]",
        "storageAccountBaseNameNewSuffix-false": "",
        "storageAccountBaseNameNewSuffix-true": "[resourceGroup().location]",
        "storageAccountPrefixes": [
            "Pre1",
            "Pre2",
            "Pre3",
            "Pre4"
        ],
        "storageAccountPrefixesCount": "[length(variables('storageAccountPrefixes'))]",
        "virtualNetworkName": "[concat(variables('orchestratorName'), '-vnet-', variables('nameSuffix'))]",
        "vmsPerStorageAccount": "[parameters('vmsPerStorageAccount')]",
        "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('storageAccountBaseName')]",
            "apiVersion": "[variables('apiVersionStorage')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "accountType": "[parameters('storageAccountType')]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
            ]
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('virtualNetworkName')]",
            "apiVersion": "[variables('apiVersionDefault')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('masterAddressPrefix')]",
                        "[variables('agentAddressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('masterSubnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('masterAddressPrefix')]"
                        }
                    },
                    {
                        "name": "[variables('agentPublicSubnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('agentPublicAddressPrefix')]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('agentPublicNSGName'))]"
                            }
                        }
                    },
                    {
                        "name": "[variables('agentPrivateSubnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('agentPrivateAddressPrefix')]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('agentPrivateNSGName'))]"
                            }
                        }
                    }
                ]
            },
            "dependsOn": [
                "[concat('Microsoft.Network/networkSecurityGroups/', variables('agentPublicNSGName'))]",
                "[concat('Microsoft.Network/networkSecurityGroups/', variables('agentPrivateNSGName'))]"
            ]
        },
        {
            "type": "Microsoft.Compute/availabilitySets",
            "name": "[variables('masterAvailabilitySet')]",
            "apiVersion": "[variables('apiVersionDefault')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "platformUpdateDomainCount": 5,
                "platformFaultDomainCount": 3
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('masterPublicIPAddressName')]",
            "apiVersion": "[variables('apiVersionDefault')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "dnsSettings": {
                    "domainNameLabel": "[variables('masterEndpointDNSNamePrefix')]"
                },
                "publicIPAllocationMethod": "Dynamic"
            }
        },
        {
            "type": "Microsoft.Network/loadBalancers",
            "name": "[variables('masterLbName')]",
            "apiVersion": "[variables('apiVersionDefault')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "backendAddressPools": [
                    {
                        "name": "[variables('masterLbBackendPoolName')]"
                    }
                ],
                "frontendIPConfigurations": [
                    {
                      "name": "[variables('masterLbIPConfigName')]",
                      "properties": {
                          "publicIPAddress": {
                              "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('masterPublicIPAddressName'))]"
                          }
                      }
                    }
                ],
                "loadBalancingRules": [
                    {
                      "name": "Consul",
                      "properties": {
                        "backendAddressPool": {
                            "id": "[concat(variables('masterLbName'), '/backendAddressPools/', variables('masterLbBackendPoolName'))]"
                        },
                        "backendPort": 8500,
                        "enableFloatingIP": false,
                        "frontendIPConfiguration": {
                            "id": "[variables('masterLbIPConfigName')]"
                        },
                        "frontendPort": 8500,
                        "idleTimeoutInMinutes": 5,
                        "loadDistribution": "Default",
                        "probe": {
                            "id": "[concat(resourceId('Microsoft.Network/loadBalancers',variables('masterLbName')),'/probes/Consul-probe')]"
                        },
                        "protocol": "tcp"
                      }
                    },
                    {
                      "name": "Nomad",
                      "properties": {
                        "backendAddressPool": {
                            "id": "[concat(variables('masterLbName'), '/backendAddressPools/', variables('masterLbBackendPoolName'))]"
                        },
                        "backendPort": 4646,
                        "enableFloatingIP": false,
                        "frontendIPConfiguration": {
                            "id": "[variables('masterLbIPConfigName')]"
                        },
                        "frontendPort": 4646,
                        "idleTimeoutInMinutes": 5,
                        "loadDistribution": "Default",
                        "probe": {
                            "id": "[concat(resourceId('Microsoft.Network/loadBalancers',variables('masterLbName')),'/probes/Nomad-probe')]"
                        },
                        "protocol": "tcp"
                      }
                    }
                ],
                "probes": [
                  {
                    "name": "Consul-probe",
                    "properties": {
                        "intervalInSeconds": "30",
                        "numberOfProbes": "3",
                        "port": 8500,
                        "protocol": "tcp"
                    }
                  },
                  {
                    "name": "Nomad-probe",
                    "properties": {
                        "intervalInSeconds": "30",
                        "numberOfProbes": "3",
                        "port": 4646,
                        "protocol": "tcp"
                    }
                  }
                ]
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
            ]
        },
        {
            "type": "Microsoft.Network/loadBalancers/inboundNatRules",
            "name": "[concat(variables('masterLbName'), '/', 'SSH-', variables('masterVMNamePrefix'), copyIndex())]",
            "apiVersion": "[variables('apiVersionDefault')]",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "masterLbLoopNode",
                "count": "[variables('masterCount')]"
            },
            "properties": {
                "backendPort": 22,
                "enableFloatingIP": false,
                "frontendIPConfiguration": {
                    "id": "[variables('masterLbIPConfigID')]"
                },
                "frontendPort": "[copyIndex(2200)]",
                "protocol": "tcp",
                "publicIPAllocationMethod": "Dynamic"
            },
            "dependsOn": [
                "[variables('masterLbID')]"
            ]
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('masterNSGName')]",
            "apiVersion": "[variables('apiVersionDefault')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": [
                    {
                      "name": "ssh",
                      "properties": {
                          "access": "Allow",
                          "description": "Allow SSH",
                          "destinationAddressPrefix": "*",
                          "destinationPortRange": "22",
                          "direction": "Inbound",
                          "priority": 200,
                          "protocol": "Tcp",
                          "sourceAddressPrefix": "*",
                          "sourcePortRange": "*"
                      }
                    },
                    {
                      "name": "Consul",
                      "properties": {
                          "access": "Allow",
                          "description": "Allow Consul",
                          "destinationAddressPrefix": "*",
                          "destinationPortRange": "8500",
                          "direction": "Inbound",
                          "priority": 101,
                          "protocol": "Tcp",
                          "sourceAddressPrefix": "*",
                          "sourcePortRange": "*"
                      }
                    },
                    {
                      "name": "Nomad",
                      "properties": {
                          "access": "Allow",
                          "description": "Allow Nomad",
                          "destinationAddressPrefix": "*",
                          "destinationPortRange": "4646",
                          "direction": "Inbound",
                          "priority": 100,
                          "protocol": "Tcp",
                          "sourceAddressPrefix": "*",
                          "sourcePortRange": "*"
                      }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('agentPrivateNSGName')]",
            "apiVersion": "[variables('apiVersionDefault')]",
            "location": "[resourceGroup().location]"
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('agentPublicNSGName')]",
            "apiVersion": "[variables('apiVersionDefault')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": [
                    {
                        "name": "Allow_HTTP",
                        "properties": {
                            "access": "Allow",
                            "description": "Allow HTTP traffic from the internet to Public Agents",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "80",
                            "direction": "Inbound",
                            "priority": 200,
                            "protocol": "*",
                            "sourceAddressPrefix": "internet",
                            "sourcePortRange": "*"
                        }
                    },
                    {
                        "name": "Allow_8080",
                        "properties": {
                            "access": "Allow",
                            "description": "Allow 8080 traffic from the internet to Public Agents",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "8080",
                            "direction": "Inbound",
                            "priority": 400,
                            "protocol": "*",
                            "sourceAddressPrefix": "internet",
                            "sourcePortRange": "*"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[concat(variables('masterVMNamePrefix'), 'nic-', copyIndex())]",
            "apiVersion": "[variables('apiVersionDefault')]",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "nicLoopNode",
                "count": "[variables('masterCount')]"
            },
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipConfigNode",
                        "properties": {
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[concat(variables('masterLbID'), '/backendAddressPools/', variables('masterLbBackendPoolName'))]"
                                }
                            ],
                            "loadBalancerInboundNatRules": [
                                {
                                    "id": "[concat(variables('masterLbID'),'/inboundNatRules/SSH-',variables('masterVMNamePrefix'),copyIndex())]"
                                }
                            ],
                            "privateIPAddress": "[concat(split(variables('masterAddressPrefix'),'0/24')[0], copyIndex(variables('masterFirstAddr')))]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('masterSubnetRef')]"
                            }
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[variables('masterNSGID')]"
                }
            },
            "dependsOn": [
                "[variables('masterLbID')]",
                "[variables('vnetID')]",
                "[concat(variables('masterLbID'),'/inboundNatRules/SSH-',variables('masterVMNamePrefix'),copyIndex())]",
                "[variables('masterNSGID')]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[concat(variables('masterVMNamePrefix'), copyIndex())]",
            "apiVersion": "[variables('apiVersionDefault')]",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "vmLoopNode",
                "count": "[variables('masterCount')]"
            },
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('masterAvailabilitySet'))]"
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "[variables('enableVMDiagnostics')]",
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('StorageAccountBaseName')), variables('apiVersionStorage')).primaryEndpoints.blob]"
                    }
                },
                "hardwareProfile": {
                    "vmSize": "[variables('masterVMSize')]"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkinterfaces',concat(variables('masterVMNamePrefix'), 'nic-', copyIndex()))]"
                        }
                    ]
                },
                "osProfile": {
                    "adminPassword": "[variables('adminPassword')]",
                    "adminUsername": "[variables('adminUsername')]",
                    "computerName": "[concat(variables('masterVMNamePrefix'), copyIndex())]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": "[parameters('disablePasswordAuthentication')]"
                    }
                },
                "storageProfile": {
                    "imageReference": {
                        "offer": "[variables('osImageOffer')]",
                        "publisher": "[variables('osImagePublisher')]",
                        "sku": "[variables('osImageSKU')]",
                        "version": "[variables('osImageVersion')]"
                    },
                    "osDisk": {
                        "caching": "ReadWrite",
                        "createOption": "FromImage",
                        "name": "[concat(variables('masterVMNamePrefix'), copyIndex(),'-osdisk')]",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('StorageAccountBaseName')),variables('apiVersionStorage')).primaryEndpoints.blob,'vhds/',variables('masterVMNamePrefix'),copyIndex(),'-osdisk.vhd')]"
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Network/networkinterfaces/', variables('masterVMNamePrefix'), 'nic-', copyIndex())]",
                "[concat('Microsoft.Compute/availabilitySets/',variables('masterAvailabilitySet'))]",
                "[variables('StorageAccountBaseName')]",
                "[variables('storageAccountBaseName')]"
            ]
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('agentPublicIPAddressName')]",
            "apiVersion": "[variables('apiVersionDefault')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "dnsSettings": {
                    "domainNameLabel": "[variables('agentEndpointDNSNamePrefix')]"
                },
                "publicIPAllocationMethod": "Dynamic"
            }
        },
        {
            "type": "Microsoft.Network/loadBalancers",
            "name": "[variables('agentsPublicLbName')]",
            "apiVersion": "[variables('apiVersionDefault')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "backendAddressPools": [
                    {
                        "name": "[variables('agentsPublicLbBackendPoolName')]"
                    }
                ],
                "frontendIPConfigurations": [
                    {
                        "name": "[variables('agentsPublicLbIPConfigName')]",
                        "properties": {
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('agentPublicIPAddressName'))]"
                            }
                        }
                    }
                ],
                "inboundNatRules": [],
                "loadBalancingRules": [
                  {
                      "name": "LBRuleHTTP",
                      "properties": {
                          "backendAddressPool": {
                              "id": "[concat(variables('agentsPublicLbID'), '/backendAddressPools/', variables('agentsPublicLbBackendPoolName'))]"
                          },
                          "backendPort": 80,
                          "enableFloatingIP": false,
                          "frontendIPConfiguration": {
                              "id": "[variables('agentsPublicLbIPConfigID')]"
                          },
                          "frontendPort": 80,
                          "idleTimeoutInMinutes": 5,
                          "loadDistribution": "Default",
                          "probe": {
                              "id": "[concat(variables('agentsPublicLbID'),'/probes/tcpHTTPProbe')]"
                          },
                          "protocol": "Tcp"
                      }
                  },
                  {
                    "name": "LBRulePort8080",
                    "properties": {
                        "backendAddressPool": {
                            "id": "[concat(variables('agentsPublicLbID'), '/backendAddressPools/', variables('agentsPublicLbBackendPoolName'))]"
                        },
                        "backendPort": 8080,
                        "enableFloatingIP": false,
                        "frontendIPConfiguration": {
                            "id": "[variables('agentsPublicLbIPConfigID')]"
                        },
                        "frontendPort": 8080,
                        "idleTimeoutInMinutes": 5,
                        "loadDistribution": "Default",
                        "probe": {
                          "id": "[concat(variables('agentsPublicLbID'),'/probes/tcpPort8080Probe')]"
                        },
                        "protocol": "Tcp"
                    }
                  }
                ],
                "probes": [
                  {
                    "name": "tcpHTTPProbe",
                    "properties": {
                        "intervalInSeconds": "5",
                        "numberOfProbes": "2",
                        "port": 80,
                        "protocol": "tcp"
                    }
                  },
                  {
                    "name": "tcpPort8080Probe",
                    "properties": {
                        "intervalInSeconds": "5",
                        "numberOfProbes": "2",
                        "port": 8080,
                        "protocol": "tcp"
                    }
                  }
                ]
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('agentPublicIPAddressName'))]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachineScaleSets",
            "sku": {
                "capacity": "[variables('agentPublicCount')]",
                "name": "[variables('agentVMSize')]",
                "tier": "Standard"
            },
            "name": "[concat(variables('agentPublicVMNamePrefix'), '-vmss')]",
            "apiVersion": "[variables('apiVersionDefault')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "upgradePolicy": {
                    "mode": "Manual"
                },
                "virtualMachineProfile": {
                    "diagnosticsProfile": {
                        "bootDiagnostics": {
                            "enabled": "[variables('enableVMDiagnostics')]",
                            "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('StorageAccountBaseName')), variables('apiVersionStorage')).primaryEndpoints.blob]"
                        }
                    },
                    "networkProfile": {
                        "networkInterfaceConfigurations": [
                            {
                                "name": "agentNodeNic",
                                "properties": {
                                    "ipConfigurations": [
                                        {
                                            "name": "nicipconfig",
                                            "properties": {
                                                "loadBalancerBackendAddressPools": [
                                                    {
                                                        "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('agentsPublicLbName'), '/backendAddressPools/',variables('agentsPublicLbBackendPoolName'))]"
                                                    }
                                                ],
                                                "subnet": {
                                                    "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('agentPublicSubnetName'))]"
                                                }
                                            }
                                        }
                                    ],
                                    "primary": true
                                }
                            }
                        ]
                    },
                    "osProfile": {
                        "adminUsername": "[variables('adminUsername')]",
                        "adminPassword": "[variables('adminPassword')]",
                        "computerNamePrefix": "[variables('agentPublicVMNamePrefix')]",
                        "linuxConfiguration": {
                            "disablePasswordAuthentication": "[parameters('disablePasswordAuthentication')]"
                        }
                    },
                    "storageProfile": {
                        "imageReference": {
                            "offer": "[variables('osImageOffer')]",
                            "publisher": "[variables('osImagePublisher')]",
                            "sku": "[variables('osImageSKU')]",
                            "version": "[parameters('linuxVersion')]"
                        },
                        "osDisk": {
                            "caching": "ReadOnly",
                            "createOption": "FromImage",
                            "name": "vmssosdisk",
                            "vhdContainers": [
                                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('StorageAccountBaseName')),variables('apiVersionStorage')).primaryEndpoints.blob, 'osdisk')]"
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('StorageAccountBaseName'))]",
                "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
                "[concat('Microsoft.Network/loadBalancers/', variables('agentsPublicLbName'))]",
                "[variables('storageAccountBaseName')]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachineScaleSets",
            "sku": {
                "capacity": "[variables('agentPrivateCount')]",
                "name": "[variables('agentVMSize')]",
                "tier": "Standard"
            },
            "name": "[concat(variables('agentPrivateVMNamePrefix'), '-vmss')]",
            "apiVersion": "[variables('apiVersionDefault')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "upgradePolicy": {
                    "mode": "Manual"
                },
                "virtualMachineProfile": {
                    "diagnosticsProfile": {
                        "bootDiagnostics": {
                            "enabled": "[variables('enableVMDiagnostics')]",
                            "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('StorageAccountBaseName')), variables('apiVersionStorage')).primaryEndpoints.blob]"
                        }
                    },
                    "networkProfile": {
                        "networkInterfaceConfigurations": [
                            {
                                "name": "agentPrivateNodeNic",
                                "properties": {
                                    "ipConfigurations": [
                                        {
                                            "name": "nicipconfig",
                                            "properties": {
                                                "subnet": {
                                                    "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('agentPrivateSubnetName'))]"
                                                }
                                            }
                                        }
                                    ],
                                    "primary": true
                                }
                            }
                        ]
                    },
                    "osProfile": {
                        "adminUsername": "[variables('adminUsername')]",
                        "adminPassword": "[variables('adminPassword')]",
                        "computerNamePrefix": "[variables('agentPrivateVMNamePrefix')]",
                        "linuxConfiguration": {
                            "disablePasswordAuthentication": "[parameters('disablePasswordAuthentication')]"
                        }
                    },
                    "storageProfile": {
                        "imageReference": {
                            "offer": "[variables('osImageOffer')]",
                            "publisher": "[variables('osImagePublisher')]",
                            "sku": "[variables('osImageSKU')]",
                            "version": "[parameters('linuxVersion')]"
                        },
                        "osDisk": {
                            "caching": "ReadOnly",
                            "createOption": "FromImage",
                            "name": "vmssosdisk",
                            "vhdContainers": [
                                "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('StorageAccountBaseName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk')]"
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
                "[variables('StorageAccountBaseName')]"
            ]
        }
    ]
}
